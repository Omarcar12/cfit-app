// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  password      String? // Para autenticaci√≥n con credenciales
  emailVerified DateTime?
  image         String?
  role          String        @default("FREE") // Cambiado de enum a String
  subscription  Subscription?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  accounts     Account[]
  sessions     Session[]
  workouts     Workout[]
  chatMessages ChatMessage[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  stripeCustomerId       String?   @unique
  stripeSubscriptionId   String?   @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
  status                 String    @default("INACTIVE") // Cambiado de enum a String
  plan                   String    @default("BASIC") // Cambiado de enum a String
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Workout {
  id          String     @id @default(cuid())
  title       String
  description String?
  duration    Int // en minutos
  difficulty  String // Cambiado de enum a String
  category    String // Cambiado de enum a String
  exercises   Exercise[]
  userId      String?
  isPublic    Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model Exercise {
  id           String   @id @default(cuid())
  name         String
  description  String?
  instructions String // Cambiado de String[] a String (JSON serializado)
  sets         Int?
  reps         Int?
  duration     Int? // en segundos
  restTime     Int? // en segundos
  equipment    String // Cambiado de String[] a String (JSON serializado)
  muscleGroups String // Cambiado de String[] a String (JSON serializado)
  difficulty   String // Cambiado de enum a String
  workoutId    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  workout Workout? @relation(fields: [workoutId], references: [id], onDelete: Cascade)
}

model ChatMessage {
  id        String   @id @default(cuid())
  content   String
  role      String // Cambiado de enum a String
  userId    String?
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
}
